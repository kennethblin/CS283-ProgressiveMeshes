/* 
 * File:   main.cpp
 * Author: tomma_000
 *
 * Created on February 2, 2013, 2:23 PM
 */

#include <cstdlib>
#include <iostream>
#include <cstring>
#include <fstream>
#include <sstream>
#include <vector>
#include <GL/glew.h>
#include <GL/glut.h>
#include <glm/glm.hpp>
#include "shaders.h"
#include <math.h>
#include <map>

using namespace std;

int maxVert = 0;
int maxFace = 0;
int maxEdge = 0;
vector< vector<float> > allVerts;
vector< vector<int> > allFaces;

map <int, int> edgeFaceCombo;

GLuint istex ;
GLuint islight ;
GLuint light0dirn ; 
GLuint light0color ; 
GLuint light1posn ; 
GLuint light1color ; 
GLuint ambient ; 
GLuint diffuse ; 
GLuint specular ; 
GLuint shininess ; 
GLuint vertexshader, fragmentshader, shaderprogram ;

float nx, ny, nz;
int mouseoldx, mouseoldy;
float anglex, angley;
float scale;
bool isRotate = false;
bool isScale = false;
float oldscale;

void keyboard (unsigned char key, int x, int y) 
{
  switch (key) {
	case 'r': // reset eye and up vectors, scale and translate. 
		break ;   
	case 27:  // Escape to quit
		exit(0) ;
		break ;
	default:
		break ;
	  }
}

void specialKey(int key, int x, int y) {
	switch(key) {
            case 100: //left
                nx -= 0.1f;
                break;
            case 103: //down
                ny -= 0.1f;
                break;
	    case 102: //right
                nx += 0.1f;
                break;
	    case 101: //up
                ny += 0.1f;
                break;
            default:
                nx = 0;
                ny = 0;
                break;
	}
	glutPostRedisplay();
}

void mouse(int button, int state, int x, int y) 
{
  if (button == GLUT_LEFT_BUTTON) {
    if (state == GLUT_UP) {
        isRotate = false;
    }
    else if (state == GLUT_DOWN) {
        mouseoldx = x; mouseoldy = y;
        isRotate = true;
    }
  }
  if (button == GLUT_RIGHT_BUTTON) {
    if (state == GLUT_UP) {
        isScale = false;
        oldscale = scale;
        cout << scale << endl;
    }
    else if (state == GLUT_DOWN) {
        isScale = true;
        mouseoldx = x; mouseoldy = y;
    }
  }
  glutPostRedisplay();
}

void mousedrag(int x, int y) {
    
    int newX = x - mouseoldx;
    int newY = y - mouseoldy;
    
    if (isRotate) {
        anglex = -(float) (newX * 0.5f);
        angley = -(float) (newY*0.5f);
    }
    
    if (isScale) {
        float sNewY = (float) y - (float) mouseoldy;
        
        scale = oldscale + sNewY * 0.01;
        
        if (scale < 0.0) {
            scale = 0.0;
        }
    }
    
    glutPostRedisplay();
}

void transformvec (const GLfloat input[4], GLfloat output[4]) {
  GLfloat modelview[16] ; // in column major order
  glGetFloatv(GL_MODELVIEW_MATRIX, modelview) ; 
  
  for (int i = 0 ; i < 4 ; i++) {
    output[i] = 0 ; 
    for (int j = 0 ; j < 4 ; j++) 
      output[i] += modelview[4*j+i] * input[j] ; 
  }
}

void parseOFFLineVert(string input) {
    istringstream pInput(input);
    string token;
    vector<float> vertex;
    while (getline(pInput, token, ' ')) {
        vertex.push_back(atof(token.c_str()));
    }
    allVerts.push_back(vertex);
}

void parseOFFLineFace(string input) {
    istringstream pInput(input);
    string token;
    vector<int> face;
    getline(pInput, token, ' ');
    int numVerts = atoi(token.c_str());
    face.push_back(numVerts);
    
    for (int i = 0; i < numVerts; i++) {
        getline(pInput, token, ' ');
        face.push_back(atoi(token.c_str()));
    }
    
    allFaces.push_back(face);
}

bool isOFF(string input) {
    if (strcmp(input.c_str(), "OFF") == 0) {
        return true;
    }
    return false;
}

void parseVertFace(string input) {
    istringstream pInput(input);
    string token;
    getline(pInput, token, ' ');
    maxVert = atoi(token.c_str());
    getline(pInput, token, ' ');
    maxFace = atoi(token.c_str());
    getline(pInput, token, ' ');
    maxEdge = atoi(token.c_str());
}

void parseOFFFile(string input) {
    ifstream myfile;
    string line;
    bool firstLine = true;
    myfile.open(input.c_str());
    int vcounter = 0;
    int fcounter = 0;
    
    while (!myfile.eof()) {
        
        if (firstLine) {
            getline (myfile, line);
            if (! isOFF(line)) {
                cout << "Not an OFF file" << endl;
                break;
            }
            getline (myfile, line);
            parseVertFace(line);
            firstLine = false;
        }
        if (vcounter < maxVert) {
            getline (myfile, line);
            parseOFFLineVert(line);
            vcounter ++;
        } else if (fcounter < maxFace) {
            getline (myfile, line);
            parseOFFLineFace(line);
            fcounter ++;
        } else {
            break;
            // DON"T DO ANYTHING FOR EDGE
        }
    }
    myfile.close();
    
}

void cinClear() {
    cin.clear();
    cin.sync();
}

void printAllVerts() {
    for (int i = 0; i < allVerts.size(); i++) {
        for (int j = 0; j < allVerts[i].size(); j++) {
            cout << allVerts[i][j] << endl;
        }
    }
}

void printAllFaces() {
    for (int i = 0; i < allFaces.size(); i++) {
        for (int j = 0; j < allFaces[i].size(); j++) {
            cout << allFaces[i][j] << endl;
        }
    }
}

void init() {
   
   glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);

   glutInitWindowSize (500, 500); 
   glutInitWindowPosition (100, 100);
   glutCreateWindow ("CS283 Progresive Meshes");
   
   /* INITIALIZE TRANSLATION/ROTATION VARIABLES*/
   nx = 0;
   ny = 0;
   nz = 0;
   mouseoldx = 0;
   mouseoldy = 0;
   anglex = 0;
   angley = 0;
   scale = 1.0f;
   oldscale = 1.0f;

   GLenum err = glewInit() ; 
   if (GLEW_OK != err) { 
	std::cerr << "Error: " << glewGetString(err) << std::endl; 
   }
   
   glClearColor (0.0, 0.0, 0.0, 0.0);
   glMatrixMode(GL_PROJECTION);
   glLoadIdentity();
   
   glMatrixMode(GL_MODELVIEW);
   glLoadIdentity();
   gluLookAt(0, 0, 0, 0, 0, 5.0f, 0, 1.0f, 0) ;
   
   vertexshader = initshaders(GL_VERTEX_SHADER, "shaders/light.vert.glsl") ;
   fragmentshader = initshaders(GL_FRAGMENT_SHADER, "shaders/light.frag.glsl") ;
   shaderprogram = initprogram(vertexshader, fragmentshader) ; 
   islight = glGetUniformLocation(shaderprogram,"islight") ;        
   light0dirn = glGetUniformLocation(shaderprogram,"light0dirn") ;       
   light0color = glGetUniformLocation(shaderprogram,"light0color") ;       
   light1posn = glGetUniformLocation(shaderprogram,"light1posn") ;       
   light1color = glGetUniformLocation(shaderprogram,"light1color") ;       
   ambient = glGetUniformLocation(shaderprogram,"ambient") ;       
   diffuse = glGetUniformLocation(shaderprogram,"diffuse") ;       
   specular = glGetUniformLocation(shaderprogram,"specular") ;       
   shininess = glGetUniformLocation(shaderprogram,"shininess") ;    
   glEnable(GL_DEPTH_TEST) ;
   glDepthFunc (GL_LESS) ;
   
   
   
}

void shade() {
     const GLfloat one[] = {1, 1, 1, 1};
     const GLfloat medium[] = {0.5, 0.5, 0.5, 1};
     const GLfloat small[] = {0.2, 0.2, 0.2, 1};
     const GLfloat high[] = {100} ;
     const GLfloat zero[] = {0.0, 0.0, 0.0, 1.0} ; 
     const GLfloat light_specular[] = {1, 0.5, 0, 1};
     const GLfloat light_specular1[] = {0, 0.5, 1, 1};
     const GLfloat light_direction[] = {0.5, 0, 0, 0}; // Dir light 0 in w 
     const GLfloat light_position1[] = {0, -0.5, 0, 1};

     GLfloat light0[4], light1[4] ; 

     transformvec(light_direction, light0) ; 
     transformvec(light_position1, light1) ; 
 
     glUniform3fv(light0dirn, 1, light0) ; 
     glUniform4fv(light0color, 1, light_specular) ; 
     glUniform4fv(light1posn, 1, light1) ; 
     glUniform4fv(light1color, 1, light_specular1) ; 

     glUniform4fv(ambient,1,small) ; 
     glUniform4fv(diffuse,1,medium) ; 
     glUniform4fv(specular,1,one) ; 
     glUniform1fv(shininess,1,high) ; 
     GLint lighting = 1;
     glUniform1i(islight,lighting) ;
}

void drawVertex(int index) {
    glVertex3f(allVerts[index][0], allVerts[index][1], allVerts[index][2]);
}

void drawTriangle(int index) {
    glBegin(GL_TRIANGLES);
    glColor3f(1.0, 1.0, 1.0);
    for (int i = 1; i <= 3; i++) {
       drawVertex(allFaces[index][i]);
    }
    glEnd();
}

void drawLines(int index) {
    glBegin(GL_LINES);
    glColor3f(0.0, 0.0, 0.0);
    drawVertex(allFaces[index][1]);
    drawVertex(allFaces[index][2]);
    
    drawVertex(allFaces[index][2]);
    drawVertex(allFaces[index][3]);
    
    drawVertex(allFaces[index][1]);
    drawVertex(allFaces[index][3]);
    glEnd();
}

void drawFaces() {
    for (int i = 0; i < allFaces.size(); i++) {
        if (allFaces[i][0] == 3) {
            drawTriangle(i);
            drawLines(i);
        }
    }
}

void display() {
    glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT) ; 
    glMatrixMode(GL_MODELVIEW) ; 
    
    /* DRAW THE OBJECT HERE*/

    //shade();
    
    glPushMatrix();
    glTranslatef(nx, ny, nz);
    glScalef(scale, scale, scale);
    glRotatef(anglex, 0.0, 1.0, 0.0);
    glRotatef(angley, 1.0, 0.0, 0.0);
    
    drawFaces();
    //glutSolidTeapot(0.5);
    glPopMatrix();
    
    glutSwapBuffers();
    glFlush();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    //string inputFile;
    //cin >> inputFile;
    init();
    parseOFFFile("armadillo.off");
    
    //cout << allVerts.size() << endl;
    //cout << allFaces.size() << endl;

    //printAllVerts();
    //printAllFaces();
    glutDisplayFunc(display);
    glutKeyboardFunc(keyboard);
    glutSpecialFunc(specialKey);
    glutMouseFunc(mouse) ;
    glutMotionFunc(mousedrag) ;
    glutMainLoop();
    
    return 0;
}

